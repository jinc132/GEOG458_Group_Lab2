} else {
print("boo")
}
if(str_detect('\d',list)){
print('hit')
} else {
print("boo")
}
if(str_detect('\d',list)){
print('hit')
} else {
print("boo")
}
if(str_detect('\d',list)){
print('hit')
} else {
print("boo")
}
if(str_detect('\\d',list)) {
print('hit')
} else {
print("boo")
}
if(grepl('\\d',list) > ) {
print('hit')
} else {
print("boo")
}
list <- c(1,22, "fiiii")
if(grepl('\\d',list) > ) {
print('hit')
} else {
print("boo")
}
if(grepl('\\d',list)) {
print('hit')
} else {
print("boo")
}
if(grepl('\\d',list) == 0) {
print('hit')
} else {
print("boo")
}
if(grepl('\\d',list) == 0) {
print('hit')
} else {
print("boo")
}
if(all(grepl( '[0-9]',list)  {
print('hit')
} else {
print("boo")
}
if(all(grepl( '[0-9]',list))){
print('hit')
} else {
print("boo")
}
library(stringr)
list <- c(1,22, "fiiii")
if(str_detect(list, "\\d")){
print('hit')
} else {
print("boo")
}
library(stringr)
list <- c(1,22, "fiiii")
if(str_detect(list, "\\d")){
print('hit')
} else {
print("boo")
}
list <- c("hiiiiii","d", "fiiii")
if(str_detect(list, "\\d")){
print('hit')
} else {
print("boo")
}
list <- c("hiiiiii","d", "fiiii")
if(str_detect(list, "\\d")){
print('hit')
} else {
print("boo")
}
if (str_detect(c("INFO 201", "UW 2019", "2.13-ghi-9li", "0123456789test")), "\\d") {
print("Oh no!")
} else {
print("Yay!")
}
if (str_detect(c("INFO 201", "UW 2019", "2.13-ghi-9li", "0123456789test")), "\\d")
print("Oh no!")
else
print("Yay!")
source('~/.active-rstudio-document', echo=TRUE)
if (str_detect(c("INFO 201", "UW 2019", "2.13-ghi-9li", "0123456789test"), "\\d") {
print("Oh no!")
} else {
print("Yay!")
}
list <- c("INFO 201", "UW 2019", "2.13-ghi-9li", "0123456789test")
if (str_detect(list, "\\d")) {
print("Oh no!")
} else {
print("Yay!")
}
library(stringr)
list <- c("INFO 201", "UW 2019", "2.13-ghi-9li", "0123456789test")
if (str_detect(list, "\\d")) {
print("Oh no!")
} else {
print("Yay!")
}
if (all(str_detect(list, "\\d"))) {
print("Oh no!")
} else {
print("Yay!")
}
if (all(str_detect(list, "\\d"))) {
print("Oh no!")
} else {
print("Yay!")
}
list <- c("INFO", "UW", "ad", "test")
if (all(str_detect(list, "\\d"))) {
print("Oh no!")
} else {
print("Yay!")
}
source('~/Documents/Info 201/a2-core-skills-jinc132-2/assignment.R', echo=TRUE)
print(my.bday.intro)
winter.break <- as.Date("2019/12/15")
print(my.bday.intro)
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, "2017/12/13")
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, "2018/12/13")
print(my.bday.intro)
source('~/Documents/Info 201/a2-core-skills-jinc132-2/assignment.R', echo=TRUE)
install.packages("stringr")
source('~/Documents/Info 201/a2-core-skills-jinc132-2/assignment.R', echo=TRUE)
source('~/Documents/Info 201/a2-core-skills-jinc132-2/assignment.R', echo=TRUE)
source('~/Documents/Info 201/a2-core-skills-jinc132-2/assignment.R', echo=TRUE)
print(casual.intro)
return(paste(introduction, ". In ", round(days.to.bday), " days I'll be ", new.age))
source('~/Documents/Info 201/a2-core-skills-jinc132-2/assignment.R', echo=TRUE)
print(days.to.break)
days.to.bday <- difftime(bday, Sys.Date())
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, "2017/12/13")
my.bday.intro
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("rjson")
source('~/.active-rstudio-document', echo=TRUE)
view(json_data)
View(json_data)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("jsonlite")
library(jsonlite)
json_data <- fromJSON("./Desktop/yelp_academic_dataset_business.json", flatten = TRUE))
source('~/.active-rstudio-document', echo=TRUE)
install.packages("jsonlite")
install.packages("jsonlite")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(json_data)
json_data <- fromJSON(file= json, method = 'C')
View(json_data)
source('~/.active-rstudio-document', echo=TRUE)
b <- lapply(X=input,fromJSON)
View(b)
View(b)
View(input)
library(RJSONIO)
install.packages("RJSONIO")
Lines <- readLines("yelp_training_set_business.json")
business <- as.data.frame(t(sapply(Lines, fromJSON)))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Desktop/AnalyzeYelp.R', echo=TRUE)
install.packages("RJSONIO")
source('~/Desktop/AnalyzeYelp.R', echo=TRUE)
source('~/Desktop/AnalyzeYelp.R', echo=TRUE)
shiny::runApp('iCloud Drive (Archive)/Documents/Info 201/a8-jinc132')
getwd
getwd()
runApp('iCloud Drive (Archive)/Documents/Info 201/a8-jinc132')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
library(leaflet)
install.packages("leaflet")
install.packages("leaflet")
library(leaflet)
library(leaflet)
library(shiny)
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
install.packages("R.utils")
# Libraries
library(leaflet)
library(R.utils)
library(shiny)
library(R.utils)
library(dplyr)
library(ggplot2)
library(mapproj)
library(data.table)
runApp('Downloads/a8-cd')
install.packages("mapproj")
library(leaflet)
library(R.utils)
library(shiny)
library(R.utils)
library(dplyr)
library(ggplot2)
library(mapproj)
library(data.table)
# Reads the ufo coordinates file
ufo_data <- read.csv(file="./data/UFOCoords.csv.bz2", header = TRUE, sep = ",")
# Start shinyServer
server <- shinyServer(function(input, output) {
# Creates a text input box where user inputs the month
# Receives results of sightings during that month
output$value <- renderText({
month_df <- ufo_data
month_df$date_format <- as.Date(month_df$Date, "%m/%d/%Y")
month_df$month <- format(month_df$date_format, "%m")
group_months <- month_df %>% group_by(month) %>% summarise(n())
colnames(group_months)[2] <- "ufo_sightings"
# Distinguishes between what the user inputted and finds the data for that month
if (input$monthInput == "January") {
month <- filter(group_months, month == "01")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "February") {
month <- filter(group_months, month == "02")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "March") {
month <- filter(group_months, month == "03")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "April") {
month <- filter(group_months, month == "04")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "May") {
month <- filter(group_months, month == "05")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "June") {
month <- filter(group_months, month == "06")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "July") {
month <- filter(group_months, month == "07")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "August") {
month <- filter(group_months, month == "08")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "September") {
month <- filter(group_months, month == "09")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "October") {
month <- filter(group_months, month == "10")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "November") {
month <- filter(group_months, month == "11")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else if (input$monthInput == "December") {
month <- filter(group_months, month == "12")
paste0("There was a total of ", month$ufo_sightings," UFO sightings during this month")
} else {
paste0("Please enter a valid month")
}
})
# Plot the data creating a bar graph of the number of UFO sightings based on shape
output$shape_plot <- renderPlot({
plot_title <- paste0("Number of UFO Sightings in ",
input$countryInput,
" by Shape Type (2016)")
usa_canada <- filter(ufo_data,
Country == input$countryInput,
AM.PM == input$typeInput)
shapes_df <- select(usa_canada, Shape)
group_shapes <- shapes_df %>% group_by(Shape) %>% summarise(n())
colnames(group_shapes)[2] <- "shape_count"
ggplot(group_shapes, aes(Shape, shape_count, fill = Shape)) +
geom_bar(stat = "identity") +
guides(fill = FALSE, color = FALSE) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(title = plot_title) +
labs(x = "Shape Type", y = "Shape Type Occurrences") +
theme_gray() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.25)) +
theme(text=element_text(size=12))
})
# Plot the data creating a bar graph of the number of UFO sightings by state province
output$state_plot <- renderPlot({
choose_province_state <- function(province_state) {
if (input$countryInput == "USA") {
paste0("State")
} else {
paste0("Province")
}
}
# Filter based on country choice
filter_province_state <- function(province_state) {
if (input$countryInput == "USA") {
paste0("USA")
} else {
paste0("CANADA")
}
}
plot_title <- paste0("Number of UFO Sightings in ",
input$countryInput,
" by ", choose_province_state(input$countryInput), " (2016)")
data <- ufo_data %>%
filter(Country == filter_province_state(input$countryInput),
AM.PM == input$typeInput)
ggplot(data) +
geom_bar(mapping = aes(x = reorder(State, State, length), fill = State)) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(plot.title = element_text(lineheight = .8, face = "bold"),
legend.position = "none") +
theme(axis.text.y = element_text(hjust = 1, vjust = 1)) +
xlab(choose_province_state(input$countryInput)) +
ylab("Sightings Count") +
labs(title = plot_title) +
coord_flip()
})
# Plots the data on the map using Leaflet
output$visual_plot <- renderLeaflet({
ufo_data$lat <- as.numeric(ufo_data$lat)
ufo_data$lng <- as.numeric(ufo_data$lng)
filter_data <- filter(ufo_data, AM.PM == input$typeInput,
Country == input$countryInput
)
map <- filter_data %>% leaflet() %>%
addTiles() %>%
addMarkers(lng = ~lng,
lat = ~lat, popup = c(paste0("<b>Description of sighting:</b> ",
filter_data$Summary,
"<br><br><b>Shape:</b> ",
filter_data$Shape,
"<br><br><b>Location: </b>",
filter_data$City, ", ",
filter_data$State, " in ",
filter_data$Country, " at ",
filter_data$Time, " ",
filter_data$AM.PM))
)
map
})
})
runApp('Downloads/a8-cd')
install.packages("rsconnect")
install.packages("rsconnect")
shiny::runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
library(leaflet)
runApp('iCloud Drive (Archive)/Documents/Info 201/a8-jinc132')
runApp('Downloads/a8-cd')
library(leaflet)
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
runApp('Downloads/a8-cd')
View(server)
runApp('Downloads/a8-cd')
runApp('Desktop/a8-cd')
install.packages(c("backports", "BH", "bit", "boot", "broom", "callr", "caTools", "class", "clipr", "cluster", "codetools", "colorspace", "curl", "data.table", "DBI", "dbplyr", "devtools", "digest", "dplyr", "evaluate", "foreign", "git2r", "haven", "hexbin", "highr", "hms", "htmlwidgets", "httpuv", "httr", "jsonlite", "lattice", "lubridate", "maps", "markdown", "Matrix", "mgcv", "mime", "nlme", "nycflights13", "openssl", "packrat", "pillar", "pkgconfig", "plotly", "processx", "ps", "purrr", "R6", "Rcpp", "RCurl", "readr", "readxl", "RJSONIO", "rlang", "rpart", "rprojroot", "rsconnect", "rstudioapi", "shiny", "sourcetools", "survival", "tibble", "urltools", "withr", "xtable"))
5*4*2*3*3*2
/6
(5*4*2*3*3*2) / 6
(3*4*2*4*4*4) /6
(2*1*2*3*3*1) / 6
sqrt(120)
sqrt(256)
sqrt(6)
srt(((5*4*2*3*3*2) / 6))
sqrt(((5*4*2*3*3*2) / 6))
sqrt(((3*4*2*4*4*4) / 6))
sqrt(((2*1*2*3*3*1) / 6))
setwd("~/Desktop/GEOG458_Group_Lab2")
bellevue_tnums <- read.csv('Data USA - Geo Map of Income by Location in Bellevue, Wa.csv')
View(bellevue_tnums)
View(bellevue_tnums)
colnames(bellevue_tnums$geo_name)
colnames(bellevue_tnums)[2]
bellevue_tnums <- read.csv('Data USA - Geo Map of Income by Location in Bellevue, Wa.csv')
# Retrieve all the tract numbers
s <-  gsub("[^\d]","", bellevue_tnums$geo_name)
# Retrieve all the tract numbers
s <-  gsub("[^\\d]","", bellevue_tnums$geo_name)
# Retrieve all the tract numbers
s <-  gsub("^\\W","", bellevue_tnums$geo_name)
# Retrieve all the tract numbers
s <-  gsub("^\\d","", bellevue_tnums$geo_name)
# Retrieve all the tract numbers
s <-  gsub("^\\d","", bellevue_tnums$geo_name)
View(bellevue_tnums)
# Retrieve all the tract numbers
s <-  gsub("[\\w][^\\d]","", bellevue_tnums$geo_name)
# Retrieve all the tract numbers
s <-  gsub("[\\w][^\\d]","", bellevue_tnums$geo_name)
# Retrieve all the tract numbers
s <-  gsub("[\\w][^\\d]"," ", bellevue_tnums$geo_name)
# Retrieve all the tract numbers
s <-  gsub('(\\w)(^\\d)'," ", bellevue_tnums$geo_name)
# Retrieve all the tract numbers
s <-  gsub('(^\\d)'," ", bellevue_tnums$geo_name)
# Retrieve all the tract numbers
s <-  gsub('^\\d'," ", bellevue_tnums$geo_name)
bellevue_tnums <- read.csv('Data USA - Geo Map of Income by Location in Bellevue, Wa.csv')
# Retrieve all the tract numbers
s <-  gsub('^\\d'," ", bellevue_tnums$geo_name)
# Retrieve all the tract numbers
s <-  gsub('\\w',"", bellevue_tnums$geo_name)
# Retrieve all the tract numbers
s <-  gsub('\\d',"", bellevue_tnums$geo_name)
View(s)
# Retrieve all the tract numbers
s <-  gsub('^\\d',"", bellevue_tnums$geo_name)
View(s)
# Retrieve all the tract numbers
s <-  gsub('\\w',"", bellevue_tnums$geo_name)
# Retrieve all the tract numbers
s <-  gsub('\\w^\\W',"", bellevue_tnums$geo_name)
# Retrieve all the tract numbers
s <-  gsub("Census Tract ","", bellevue_tnums$geo_name)
s <- unique(s)
# Retrieve all the tract numbers and clean it of duplicates
tnums <-  gsub("Census Tract ","", bellevue_tnums$geo_name)
tnums <- unique(tnums)
library(tidyverse)
library(tigris)
library(sf)
library(reshape2)
options(tigris_class = "sf")
options(tigris_use_cache = TRUE)
# Part 1
od <- read.csv('wa_od_main_JT00_2015.csv')
rac <- read.csv('wa_rac_S000_JT00_2015.csv')
wac <- read.csv('wa_wac_S000_JT00_2015.csv')
bellevue_tnums <- read.csv('Data USA - Geo Map of Income by Location in Bellevue, Wa.csv')
# Retrieve all the tract numbers and clean it of duplicates
tnums <-  gsub("Census Tract ","", bellevue_tnums$geo_name)
tnums <- unique(tnums)
# Read in Bellevue city boundary shape file
wa_tracts <- st_read("cb_2017_53_tract_500k.shp")
# Find all the Census Tracts in Bellevue in the wa_tracts shapefile
bellevue <- wa_tracts %>%
filter(NAME %in% tnums)
View(bellevue_tnums)
View(bellevue)
# Find all the Census Tracts in Bellevue in the wa_tracts shapefile
bellevue <- subset(wa_tract, NAME %>% tnums)
# Find all the Census Tracts in Bellevue in the wa_tracts shapefile
bellevue <- subset(wa_tracts, NAME %>% tnums)
tnums <- data.frame(unique(tnums))
View(tnums)
tnums <- data.frame(tract_values = unique(tnums))
View(tnums)
tnums <- data.frame(tract_values = unique(tnums))
View(tnums)
tnums <- data.frame(tract_values = c(unique(tnums))
tnums <- data.frame(tract_values = c(unique(tnums)))
tnums <- data.frame(tract_values = unique(tnums))
View(tnums)
tnums <- data.frame("tract_values" = unique(tnums))
View(tnums)
tnums <- data.frame(unique(tnums))
# Find all the Census Tracts in Bellevue in the wa_tracts shapefile
bellevue <- subset(tnums, unique.tnums %>% wa_tracts)
tnums <- data.frame(unique(tnums))
View(tnums)
# Find all the Census Tracts in Bellevue in the wa_tracts shapefile
bellevue <- subset(tnums, unique.tnums. %>% wa_tracts)
# Find all the Census Tracts in Bellevue in the wa_tracts shapefile
bellevue <- wa_tracts %>%
filter(NAME %in% tnums)
tnums <- unique(tnums)
# Find all the Census Tracts in Bellevue in the wa_tracts shapefile
bellevue <- wa_tracts %>%
filter(NAME %in% tnums)
bellevue_tnums <- read.csv('Data USA - Geo Map of Income by Location in Bellevue, Wa.csv')
# Retrieve all the tract numbers and clean it of duplicates
tnums <-  gsub("Census Tract ","", bellevue_tnums$geo_name)
tnums <- unique(tnums)
# Read in Bellevue city boundary shape file
wa_tracts <- st_read("cb_2017_53_tract_500k.shp")
# Find all the Census Tracts in Bellevue in the wa_tracts shapefile
bellevue <- wa_tracts %>%
filter(NAME %in% tnums)
View(bellevue)
# Retrieve all the tract numbers and clean it of duplicates
tnums <-  gsub("Census Tract ","", bellevue_tnums$geo_name)
# Read in Bellevue city boundary shape file
wa_tracts <- st_read("cb_2017_53_tract_500k.shp")
# Find all the Census Tracts in Bellevue in the wa_tracts shapefile
bellevue <- wa_tracts %>%
filter(NAME %in% tnums)
tnums <- unique(tnums)
# Read in Bellevue city boundary shape file
wa_tracts <- st_read("cb_2017_53_tract_500k.shp")
# Find all the Census Tracts in Bellevue in the wa_tracts shapefile
bellevue <- wa_tracts %>%
filter(NAME %in% tnums)
